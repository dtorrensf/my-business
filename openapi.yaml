openapi: 3.0.3
info:
  title: My Business
  description: |-
    An application that helps small business companies with their daily transactions.
  version: 0.0.1
externalDocs:
  description: Find out more about My Business
  url: https://github.com/dtorrensf/my-business/blob/main/about.md
servers:
  - url: https://localhost:8080/api
tags:
  - name: users
    description: Users administration
  - name: companies
    description: Companies administration
  - name: customers
    description: Customers administration
paths:
  /login:
    post:
      description: SignIn a user.
      summary: Validates a user and return the access token.
      operationId: login
      tags:
      - users
      requestBody:
        description: New user details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentialModel'
        required: true
      responses:
        200:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenModel'
        401:
          description: Not authorized user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /users:
    post:
      description: Creates a new user.
      summary: Creates a new user.
      operationId: createUser
      tags:
      - users
      requestBody:
        description: New user details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUserModel'
        required: true
      responses:
        201:
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdModel'
        400:
          description: Not valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /users/{userId}:
    get:
      description: Get user details.
      summary: Gets the user details.
      operationId: getUser
      tags:
      - users
      security:
      - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: The user id value
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        404:
          description: User not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    patch:
      description: Update user details.
      summary: Update the user details.
      operationId: updateUser
      tags:
      - users
      security:
      - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: The user id value
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserModel'
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        404:
          description: User not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
    delete:
      description: Delete user
      summary: Delete the user
      operationId: deleteUser
      tags:
      - users
      security:
      - bearerAuth: []
      parameters:
        - name: userId
          in: path
          description: The user id value
          required: true
          schema:
            type: integer
            format: int64
      responses:
        201:
          description: User deleted succesfully
        404:
          description: User not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    IdModel:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 22
    TokenModel:
      type: object
      properties:
        access_token:
          type: string
          example: eyÑAJDFOAMCROAOAÑSDNVOAENVEOAN
    UserCredentialModel:
      type: object
      properties:
        email:
          type: string
          example: user@email.com
        password:
          type: string
          example: anyPassword
    UserModel:
      type: object
      properties:
        username:
          type: string
          example: username
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string  
          example: john@email.com
        phone:
          type: string
          example: '12345'
    NewUserModel:
      allOf:
        - $ref: "#/components/schemas/UserModel"
        - type: object
          properties:
            password:
              type: string
              example: '12345'
    ErrorModel:
      type: object
      properties:
        message: 
          type: string
          example: Not valid request
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT